const web3 = require('../../web3');
const ABI = require('../constants/abis');

class PlayerService {
    
    async getPlayerInfo(address) {
        const contract = new web3.eth.Contract(ABI.player_abi, address)

        return await contract.methods.player().call()
        .then(response => {
            return response;
        })
        .catch(error => {
            throw error;
        })
    }

    async getPlayers() {
        const registry = new web3.eth.Contract(ABI.registry_abi, "0xE417B8038d1bB2D6F0FcB89817eF217f0180b81D")
        
        return await registry.methods.getPlayersForAddress(web3.eth.defaultAccount).call()
        .then(response => {
            return response;
        })
        .catch(error => {
            throw error;
        })
    }

    async getListedPlayers() {
        const registry = new web3.eth.Contract(ABI.registry_abi, "0xE417B8038d1bB2D6F0FcB89817eF217f0180b81D")
        
        return await registry.methods.getListedPlayers().call()
        .then(response => {
            return response;
        })
        .catch(error => {
            throw error;
        })
    }

    async createPlayer(player, player_price) {

        const contract = new web3.eth.Contract(ABI.player_abi, null, {
            gas: 3000000
        })

        return await contract.deploy({
            data: '',
            arguments: [player.name, player.pos, player.overall]
        })
        .send({
            from: web3.eth.defaultAccount,
            value: player_price
        })
        .then((response) => {
            return response;
        })
        .catch(error => {
            throw error;
        })
    }

    async listPlayer(address) {
        const contract = new web3.eth.Contract(ABI.player_abi, address)

        console.log(contract)
        return await contract.methods.listPlayer().send({
            from: web3.eth.defaultAccount,
            gas: 3000000
        })
        .then(response => {
            console.log(response)
            return response;
        })
        .catch(error => {
            throw error;
        })
    }

    async unlistPlayer(address) {
        const contract = new web3.eth.Contract(ABI.player_abi, address)

        console.log(contract)
        return await contract.methods.unlistPlayer().send({
            from: web3.eth.defaultAccount,
            gas: 3000000
        })
        .then(response => {
            console.log(response)
            return response;
        })
        .catch(error => {
            throw error;
        })
    }
}

module.exports = new PlayerService()